name: 🎵 Release SCDL

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  id-token: write
  packages: write

jobs:
  create-release-notes:
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.notes.outputs.notes }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate Release Notes
      id: notes
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        cat > release_notes.md << 'EOF'
        ## 🎵 What's New in SCDL ${{ github.ref_name }}
        
        ### 🚀 Features & Improvements:
        EOF
        
        if [ -n "$PREV_TAG" ]; then
          git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges >> release_notes.md
        else
          echo "- Initial release of SCDL!" >> release_notes.md
        fi
        
        cat >> release_notes.md << 'EOF'
        
        ## 🎧 Try It Now!
        Test SCDL with this amazing track:
        ```bash
        scdl -l https://soundcloud.com/ghostxkitty3/view-of-andromeda
        ```
        *"View of Andromeda" by GhostxKitty3 - Perfect ambient music for your coding sessions! 🌌*
        
        ## 📦 Installation
        ```bash
        pip install scdl
        ```
        
        ## 🐳 Docker
        ```bash
        docker run --rm -v $(pwd)/downloads:/downloads ghcr.io/scdl-org/scdl:latest -l https://soundcloud.com/ghostxkitty3/view-of-andromeda
        ```
        
        ---
        
        💝 **Support the Project**: Star ⭐ this repo and check out more amazing music at [soundcloud.com/ghostxkitty3](https://soundcloud.com/ghostxkitty3)!
        EOF
        
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  build-and-publish:
    needs: create-release-notes
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Build package
      run: |
        uv sync --dev
        uv build

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true

    - name: Extract release notes
      id: extract-notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract changelog for this version
        awk -v version="$VERSION" '
        /^## \[/ { 
          if ($0 ~ "\\[" version "\\]") found=1
          else if (found) exit
        }
        found && !/^## \[/ { print }
        ' CHANGELOG.md > release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        generate_release_notes: true
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          scdlorg/scdl
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
